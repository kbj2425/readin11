<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>집중력 훈련 - READIN</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #FFC0CB, #FFB6C1);
            min-height: 100vh;
        }

        .header {
            background: white;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            color: #FFC0CB;
            font-size: 1.8em;
            font-weight: bold;
        }

        .user-menu {
            position: relative;
        }

        .username {
            color: #FFC0CB;
            font-weight: bold;
            cursor: pointer;
            padding: 10px 15px;
            border-radius: 5px;
            transition: background 0.3s;
        }

        .username:hover {
            background: #f0f0f0;
        }

        .dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            min-width: 150px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            border-radius: 5px;
            display: none;
            z-index: 1000;
        }

        .dropdown.show {
            display: block;
        }

        .dropdown a {
            display: block;
            padding: 10px 15px;
            text-decoration: none;
            color: #333;
            transition: background 0.3s;
        }

        .dropdown a:hover {
            background: #FFC0CB;
            color: white;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }

        .training-card {
            background: white;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .training-title {
            font-size: 2em;
            color: #333;
            margin-bottom: 30px;
        }

        .instructions {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
        }

        .instructions h3 {
            color: #FFC0CB;
            margin-bottom: 15px;
        }

        .instructions p {
            color: #666;
            line-height: 1.6;
            margin-bottom: 10px;
        }

        .speed-info {
            background: #e8f4f8;
            border-left: 4px solid #17a2b8;
            padding: 10px 15px;
            margin: 15px 0;
            border-radius: 5px;
        }

        .speed-info strong {
            color: #17a2b8;
        }

        .training-controls {
            margin: 40px 0;
        }

        .play-button {
            background: #FFC0CB;
            color: white;
            border: none;
            padding: 20px 40px;
            border-radius: 50%;
            font-size: 2em;
            cursor: pointer;
            transition: all 0.3s;
            margin-bottom: 20px;
            width: 100px;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px auto;
        }

        .play-button:hover {
            background: #FF69B4;
            transform: scale(1.1);
        }

        .play-button:disabled {
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }

        .status {
            font-size: 1.2em;
            margin: 20px 0;
            color: #666;
        }

        .bpm-display {
            font-size: 1.1em;
            color: #17a2b8;
            font-weight: bold;
            margin: 10px 0;
        }

        .answer-section {
            display: none;
            margin-top: 30px;
        }

        .answer-input {
            padding: 15px;
            font-size: 1.5em;
            border: 3px solid #FFC0CB;
            border-radius: 10px;
            width: 200px;
            text-align: center;
            margin: 0 10px;
        }

        .answer-input:focus {
            outline: none;
            border-color: #FF69B4;
        }

        .submit-button {
            background: #FFC0CB;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 10px;
            font-size: 1.1em;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            margin-left: 10px;
        }

        .submit-button:hover {
            background: #FF69B4;
        }

        .result {
            display: none;
            margin-top: 30px;
            padding: 20px;
            border-radius: 10px;
            font-size: 1.2em;
        }

        .result.correct {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .result.incorrect {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .back-button {
            background: #6c757d;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            text-decoration: none;
            display: inline-block;
            margin-top: 20px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .back-button:hover {
            background: #545b62;
        }

        .sound-visualization {
            width: 200px;
            height: 30px;
            background: #e0e0e0;
            border-radius: 15px;
            margin: 20px auto;
            position: relative;
            overflow: hidden;
            display: none;
        }

        .sound-bar {
            height: 100%;
            background: linear-gradient(90deg, #FFC0CB, #FF69B4);
            border-radius: 15px;
            width: 0%;
            transition: width 0.1s;
        }

        .count-display {
            font-size: 1.5em;
            color: #FFC0CB;
            font-weight: bold;
            margin-top: 10px;
            display: none;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .training-card {
                padding: 20px;
            }
            
            .training-title {
                font-size: 1.5em;
            }
            
            .answer-input {
                width: 150px;
                font-size: 1.2em;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">READIN</div>
        <div class="user-menu">
            <div class="username" onclick="toggleDropdown()"><%= username %> ▼</div>
            <div class="dropdown" id="dropdown">
                <a href="/dashboard">대시보드</a>
                <a href="/change-password">비밀번호 변경</a>
                <a href="/logout">로그아웃</a>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="training-card">
            <h1 class="training-title">집중력 훈련</h1>
            
            <div class="instructions">
                <h3>훈련 방법</h3>
                <p>1. 아래 재생 버튼을 눌러 소리를 들어보세요.</p>
                <p>2. 소리가 총 몇 번 반복되는지 주의깊게 들어보세요.</p>
                <p>3. 소리가 끝나면 들은 횟수를 입력하고 제출하세요.</p>
                <p><strong>주의:</strong> 실제 횟수의 ±1 범위 내의 답변은 정답으로 인정됩니다.</p>
                
                <div class="speed-info">
                    <strong>속도:</strong> 100 BPM (1분에 100번 속도로 재생됩니다)
                </div>
            </div>

            <div class="training-controls">
                <button class="play-button" onclick="startTraining()" id="playButton">▶</button>
                <div class="status" id="status">재생 버튼을 눌러 시작하세요</div>
                <div class="bpm-display">🎵 100 BPM</div>
                <div class="sound-visualization" id="soundViz">
                    <div class="sound-bar" id="soundBar"></div>
                </div>
            </div>

            <div class="answer-section" id="answerSection">
                <h3>몇 번 들렸나요?</h3>
                <input type="number" class="answer-input" id="answerInput" min="1" placeholder="횟수 입력">
                <button class="submit-button" onclick="submitAnswer()">제출</button>
            </div>

            <div class="result" id="result"></div>

            <a href="/dashboard" class="back-button">대시보드로 돌아가기</a>
        </div>
    </div>

    <script>
       const actualCount = <%= actualCount %>;

// 개선된 오디오 매니저 클래스
class PrecisionAudioManager {
    constructor() {
        this.audioContext = null;
        this.masterGain = null;
        this.initialized = false;
        this.isPlaying = false;
        
        this.FREQUENCY = 800;
        this.BEEP_DURATION = 0.15;
        this.BPM = 100;
        this.BEAT_INTERVAL = 60 / this.BPM;
        this.ATTACK_TIME = 0.01;
        this.RELEASE_TIME = 0.05;
        
        // 숫자 음성 파일 URL (Google Drive)
       // 숫자 음성 파일 URL (로컬 파일)
this.numberAudioUrls = {
    1: '/sounds/1.mp3',
    2: '/sounds/2.mp3',
    3: '/sounds/3.mp3',
    4: '/sounds/4.mp3',
    5: '/sounds/5.mp3',
    6: '/sounds/6.mp3',
    7: '/sounds/7.mp3',
    8: '/sounds/8.mp3',
    9: '/sounds/9.mp3',
    10: '/sounds/10.mp3'
};
    }
    
    async init() {
        if (this.initialized) return;
        
        try {
            this.audioContext = new (window.AudioContext || window.webkitAudioContext)({
                latencyHint: 'interactive',
                sampleRate: 44100
            });
            
            this.masterGain = this.audioContext.createGain();
            this.masterGain.connect(this.audioContext.destination);
            this.masterGain.gain.setValueAtTime(0.3, this.audioContext.currentTime);
            
            if (this.audioContext.state === 'suspended') {
                await this.audioContext.resume();
            }
            
            this.initialized = true;
            console.log('오디오 시스템 초기화 완료');
            
        } catch (error) {
            console.error('오디오 초기화 실패:', error);
            throw new Error('오디오 시스템을 초기화할 수 없습니다.');
        }
    }
    
    createPreciseBeep(startTime) {
        const oscillator = this.audioContext.createOscillator();
        const gainNode = this.audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(this.masterGain);
        
        oscillator.frequency.setValueAtTime(this.FREQUENCY, startTime);
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0, startTime);
        gainNode.gain.linearRampToValueAtTime(0.8, startTime + this.ATTACK_TIME);
        gainNode.gain.linearRampToValueAtTime(0.8, startTime + this.BEEP_DURATION - this.RELEASE_TIME);
        gainNode.gain.linearRampToValueAtTime(0, startTime + this.BEEP_DURATION);
        
        oscillator.start(startTime);
        oscillator.stop(startTime + this.BEEP_DURATION);
        
        return oscillator;
    }
    
async playSequence(count, onBeep = null) {
    if (!this.initialized) {
        await this.init();
    }
    
    if (this.isPlaying) return;
    this.isPlaying = true;
    
    const startTime = this.audioContext.currentTime + 0.1;
    const totalDuration = (count - 1) * this.BEAT_INTERVAL + this.BEEP_DURATION;
    
    // 모든 비프음을 미리 스케줄링
    for (let i = 0; i < count; i++) {
        const beepStartTime = startTime + (i * this.BEAT_INTERVAL);
        this.createPreciseBeep(beepStartTime);
        
        // 각 비프음마다 시각적 피드백 콜백 호출
        if (onBeep) {
            setTimeout(() => {
                onBeep(i + 1, count);
            }, (i * this.BEAT_INTERVAL * 1000) + 100);
        }
    }
    
    // 완료까지 대기
    await new Promise(resolve => {
        setTimeout(resolve, (totalDuration + 0.2) * 1000);
    });
    
    this.isPlaying = false;
}

async playNumberAudio(number) {
    return new Promise((resolve, reject) => {
        const audio = new Audio();
        audio.crossOrigin = "anonymous";
        audio.src = this.numberAudioUrls[number];
        
        audio.onended = () => {
            console.log(`음성 ${number} 재생 완료`);
            resolve();
        };
        
        audio.onerror = (e) => {
            console.error(`음성 ${number} 재생 실패:`, e);
            console.log('URL:', this.numberAudioUrls[number]);
            resolve();
        };
        
        audio.play().then(() => {
            console.log(`음성 ${number} 재생 시작`);
        }).catch(err => {
            console.error(`음성 ${number} 재생 오류:`, err);
            resolve();
        });
    });
}

async playSequenceWithVoice(count, onBeep = null) {
    if (!this.initialized) {
        await this.init();
    }
    
    if (this.isPlaying) return;
    this.isPlaying = true;
    
    try {
        // 첫 시작 전 한 템포(600ms) 대기
        await new Promise(resolve => setTimeout(resolve, this.BEAT_INTERVAL * 1000));
        
        // 1-10까지는 MP3 음성 + 비프음 동시 재생
        for (let i = 1; i <= Math.min(count, 10); i++) {
            const startTime = performance.now();
            
            if (onBeep) {
                onBeep(i, count);
            }
            
            // MP3 음성 재생
            const audio = new Audio(this.numberAudioUrls[i]);
            audio.crossOrigin = "anonymous";
            audio.play().catch(err => console.error(`음성 ${i} 재생 오류:`, err));
            
            // 비프음 동시 재생
            const beepTime = this.audioContext.currentTime;
            this.createPreciseBeep(beepTime);
            
            // 600ms 대기
            const elapsed = performance.now() - startTime;
            const waitTime = Math.max(0, (this.BEAT_INTERVAL * 1000) - elapsed);
            await new Promise(resolve => setTimeout(resolve, waitTime));
        }
        
        // 11번째부터는 비프음만 재생 (100 BPM 유지)
        if (count > 10) {
            const startTime = this.audioContext.currentTime + 0.1;
            const remainingCount = count - 10;
            
            for (let i = 0; i < remainingCount; i++) {
                const beepStartTime = startTime + (i * this.BEAT_INTERVAL);
                this.createPreciseBeep(beepStartTime);
                
                if (onBeep) {
                    setTimeout(() => {
                        onBeep(11 + i, count);
                    }, (i * this.BEAT_INTERVAL * 1000) + 100);
                }
            }
            
            const totalDuration = (remainingCount - 1) * this.BEAT_INTERVAL + this.BEEP_DURATION;
            await new Promise(resolve => {
                setTimeout(resolve, (totalDuration + 0.2) * 1000);
            });
        }
    } catch (error) {
        console.error('재생 오류:', error);
    }
    
    this.isPlaying = false;
}
}

const audioManager = new PrecisionAudioManager();

        function toggleDropdown() {
            const dropdown = document.getElementById('dropdown');
            dropdown.classList.toggle('show');
        }

        document.querySelector('.user-menu').addEventListener('mouseenter', function() {
            document.getElementById('dropdown').classList.add('show');
        });

        document.querySelector('.user-menu').addEventListener('mouseleave', function() {
            setTimeout(function() {
                document.getElementById('dropdown').classList.remove('show');
            }, 300);
        });

async function startTraining() {
    if (audioManager.isPlaying) return;
    
    try {
        const playButton = document.getElementById('playButton');
        const status = document.getElementById('status');
        const soundViz = document.getElementById('soundViz');
        const soundBar = document.getElementById('soundBar');
        const showVisualFeedback = <%= showVisualFeedback %>;
        
        playButton.disabled = true;
        playButton.textContent = '⏸';
        status.textContent = `소리를 재생 중입니다 (1-10 음성, 나머지 비프음)`;
        
        if (showVisualFeedback) {
            soundViz.style.display = 'block';
        }
        
        await audioManager.playSequenceWithVoice(actualCount, showVisualFeedback ? (current, total) => {
            soundBar.style.width = '100%';
            setTimeout(() => {
                soundBar.style.width = '0%';
            }, 150);
        } : null);
        
        playButton.textContent = '✓';
        playButton.style.background = '#28a745';
        status.textContent = '소리 재생이 완료되었습니다. 답변을 입력하세요.';
        
        if (showVisualFeedback) {
            soundViz.style.display = 'none';
        }
        
        document.getElementById('answerSection').style.display = 'block';
        document.getElementById('answerInput').focus();
        
    } catch (error) {
        console.error('훈련 시작 실패:', error);
        document.getElementById('status').textContent = '오디오 재생 실패: ' + error.message;
        document.getElementById('playButton').disabled = false;
    }
}

        async function submitAnswer() {
            const answerInput = document.getElementById('answerInput');
            const userAnswer = parseInt(answerInput.value);
            
            if (!userAnswer || userAnswer < 1) {
                alert('올바른 횟수를 입력해주세요.');
                return;
            }
            
            try {
                const response = await fetch('/submit-answer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        actualCount: actualCount,
                        userAnswer: userAnswer
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showResult(result);
                } else {
                    alert(result.message || '제출에 실패했습니다.');
                }
            } catch (error) {
                alert('서버와의 통신에 실패했습니다.');
                console.error('Error:', error);
            }
        }

        function showResult(result) {
            const resultDiv = document.getElementById('result');
            const answerSection = document.getElementById('answerSection');
            
            answerSection.style.display = 'none';
            
            if (result.isCorrect) {
                resultDiv.className = 'result correct';
                resultDiv.innerHTML = `
                    <h3>🎉 정답입니다!</h3>
                    <p>실제 횟수: ${result.actualCount}번</p>
                    <p>당신의 답변: ${result.userAnswer}번</p>
                    <p>재생 속도: 100 BPM</p>
                    <p>남은 도전 기회: ${result.remainingAttempts}번</p>
                `;
            } else {
                resultDiv.className = 'result incorrect';
                resultDiv.innerHTML = `
                    <h3>❌ 아쉽게 틀렸습니다</h3>
                    <p>실제 횟수: ${result.actualCount}번</p>
                    <p>당신의 답변: ${result.userAnswer}번</p>
                    <p>재생 속도: 100 BPM</p>
                    <p>남은 도전 기회: ${result.remainingAttempts}번</p>
                `;
            }
            
            resultDiv.style.display = 'block';
        }

        // Enter key support for answer input
        document.getElementById('answerInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                submitAnswer();
            }
        });
    </script>
</body>
</html>
