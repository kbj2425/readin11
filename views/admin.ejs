<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>관리자 패널 - READIN</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #FFC0CB, #FFB6C1);
            min-height: 100vh;
        }

        .header {
            background: white;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            color: #FFC0CB;
            font-size: 1.8em;
            font-weight: bold;
        }

        .user-menu {
            position: relative;
        }

        .username {
            color: #FFC0CB;
            font-weight: bold;
            cursor: pointer;
            padding: 10px 15px;
            border-radius: 5px;
            transition: background 0.3s;
        }

        .username:hover {
            background: #f0f0f0;
        }

        .dropdown {
            position: absolute;
            top: 100%;
            right: 0;
            background: white;
            min-width: 150px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            border-radius: 5px;
            display: none;
            z-index: 1000;
        }

        .dropdown.show {
            display: block;
        }

        .dropdown a {
            display: block;
            padding: 10px 15px;
            text-decoration: none;
            color: #333;
            transition: background 0.3s;
        }

        .dropdown a:hover {
            background: #FFC0CB;
            color: white;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .admin-section {
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
        }

        .section-title {
            color: #333;
            font-size: 1.5em;
            margin-bottom: 20px;
            border-bottom: 2px solid #FFC0CB;
            padding-bottom: 10px;
        }

        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .setting-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .toggle-switch {
            position: relative;
            width: 60px;
            height: 30px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 30px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 22px;
            width: 22px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: #FFC0CB;
        }

        input:checked + .slider:before {
            transform: translateX(30px);
        }

        .search-section {
            margin-bottom: 20px;
        }

        .search-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #FFC0CB;
            border-radius: 8px;
            font-size: 16px;
            margin-bottom: 20px;
        }

        .users-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .users-table th,
        .users-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        .users-table th {
            background: #FFC0CB;
            color: white;
            font-weight: bold;
        }

        .level-select {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background: white;
        }

        .action-button {
            padding: 6px 12px;
            margin: 2px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s;
        }

        .bonus-btn {
            background: #28a745;
            color: white;
        }

        .bonus-btn:hover {
            background: #218838;
        }

        .change-pwd-btn {
            background: #ffc107;
            color: #212529;
        }

        .change-pwd-btn:hover {
            background: #e0a800;
        }

        .delete-btn {
            background: #dc3545;
            color: white;
        }

        .delete-btn:hover {
            background: #c82333;
        }
.all-records-btn {
    background: #6f42c1;
    color: white;
}

.all-records-btn:hover {
    background: #5a32a3;
}

.daily-record-item {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    margin-bottom: 15px;
    overflow: hidden;
}

.daily-record-header {
    background: #e9ecef;
    padding: 15px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.daily-record-header:hover {
    background: #dee2e6;
}

.daily-record-content {
    display: none;
    padding: 15px;
}

.daily-record-content.show {
    display: block;
}

.daily-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px;
    margin-bottom: 15px;
}

.daily-stat-item {
    background: white;
    padding: 10px;
    border-radius: 5px;
    text-align: center;
    border: 1px solid #dee2e6;
}

.expand-icon {
    transition: transform 0.3s;
}

.expand-icon.rotated {
    transform: rotate(180deg);
}

.view-records-btn {
    background: #17a2b8;
    color: white;
}

.view-records-btn:hover {
    background: #138496;
}

.user-records-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.4);
}

.user-records-content {
    background-color: white;
    margin: 5% auto;
    padding: 20px;
    border-radius: 10px;
    width: 90%;
    max-width: 1000px;
    max-height: 80vh;
    overflow-y: auto;
}

.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 15px;
    margin-bottom: 20px;
}

.stat-item {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    text-align: center;
}

.stat-number {
    font-size: 2em;
    font-weight: bold;
    color: #FFC0CB;
}

.stat-label {
    color: #666;
    margin-top: 5px;
}

.records-controls {
    margin-bottom: 20px;
}

.records-controls input {
    margin-right: 10px;
}

        .records-section {
            margin-top: 20px;
        }

        .date-input {
            padding: 10px;
            border: 2px solid #FFC0CB;
            border-radius: 5px;
            margin-right: 10px;
        }

        .view-records-btn {
            background: #FFC0CB;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }

        .view-records-btn:hover {
            background: #FF69B4;
        }

        .records-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            display: none;
        }

        .records-table th,
        .records-table td {
            padding: 10px;
            text-align: center;
            border-bottom: 1px solid #eee;
            font-size: 14px;
        }

        .records-table th {
            background: #FFC0CB;
            color: white;
        }

        .correct-record {
            color: #27ae60;
            font-weight: bold;
        }

        .incorrect-record {
            color: #e74c3c;
            font-weight: bold;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.4);
        }

        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 10px;
            width: 300px;
            text-align: center;
        }

        .modal-input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 2px solid #FFC0CB;
            border-radius: 5px;
        }

        .modal-buttons {
            margin-top: 20px;
        }

        .modal-button {
            padding: 10px 20px;
            margin: 0 5px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
        }

        .confirm-btn {
            background: #FFC0CB;
            color: white;
        }

        .cancel-btn {
            background: #6c757d;
            color: white;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .admin-section {
                padding: 15px;
            }
            
            .settings-grid {
                grid-template-columns: 1fr;
            }
            
            .users-table,
            .records-table {
                font-size: 12px;
            }
            
            .users-table th,
            .users-table td,
            .records-table th,
            .records-table td {
                padding: 6px 4px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">READIN 관리자</div>
        <div class="user-menu">
            <div class="username" onclick="toggleDropdown()"><%= username %> ▼</div>
            <div class="dropdown" id="dropdown">
                <a href="/change-password">비밀번호 변경</a>
                <a href="/logout">로그아웃</a>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="admin-section">
            <h2 class="section-title">시스템 설정</h2>
            <div class="settings-grid">
                <div class="setting-item">
                    <span>자동 회원가입 허용</span>
                    <label class="toggle-switch">
                        <input type="checkbox" id="autoSignup" <%= settings.auto_signup === '1' ? 'checked' : '' %> onchange="toggleSetting('auto_signup')">
                        <span class="slider"></span>
                    </label>
                </div>
                <div class="setting-item">
                    <span>참가자 비밀번호 변경 허용</span>
                    <label class="toggle-switch">
                        <input type="checkbox" id="allowPasswordChange" <%= settings.allow_password_change === '1' ? 'checked' : '' %> onchange="toggleSetting('allow_password_change')">
                        <span class="slider"></span>
                    </label>
                </div>
<div class="setting-item">
    <span>훈련 중 시각적 피드백 표시</span>
    <label class="toggle-switch">
        <input type="checkbox" id="showVisualFeedback" <%= settings.show_visual_feedback === '1' ? 'checked' : '' %> onchange="toggleSetting('show_visual_feedback')">
        <span class="slider"></span>
    </label>
</div>
            </div>
        </div>

        <div class="admin-section">
            <h2 class="section-title">참가자 관리</h2>
            
            <div class="search-section">
                <input type="text" class="search-input" placeholder="참가자 이름으로 검색..." onkeyup="searchUsers(this.value)">
            </div>

            <table class="users-table" id="usersTable">
                <thead>
                    <tr>
                        <th>사용자 이름</th>
                        <th>레벨</th>
                        <th>관리</th>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach(user => { %>
                    <tr data-user-id="<%= user.id %>" data-username="<%= user.username %>">
                        <td><%= user.username %></td>
                        <td>
                            <select class="level-select" onchange="updateLevel(<%= user.id %>, this.value)">
                                <option value="1" <%= user.level === 1 ? 'selected' : '' %>>레벨 1 (초급)</option>
                                <option value="2" <%= user.level === 2 ? 'selected' : '' %>>레벨 2 (중급)</option>
                                <option value="3" <%= user.level === 3 ? 'selected' : '' %>>레벨 3 (기본)</option>
                            </select>
                        </td>
                      <td>
    <button class="action-button bonus-btn" onclick="giveBonus(<%= user.id %>)">추가 기회</button>
    <button class="action-button change-pwd-btn" onclick="changePassword(<%= user.id %>, '<%= user.username %>')">비밀번호</button>
    <button class="action-button all-records-btn" onclick="viewAllUserRecords(<%= user.id %>, '<%= user.username %>')">전체 기록</button>
    <button class="action-button delete-btn" onclick="deleteUser(<%= user.id %>, '<%= user.username %>')">삭제</button>
</td>
                    </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>

        <div class="admin-section">
            <h2 class="section-title">훈련 기록 조회</h2>
            <div class="records-section">
    <div class="records-controls">
        <input type="date" class="date-input" id="recordDate" value="">
        <input type="text" class="search-input" id="userSearch" placeholder="학생 이름으로 검색..." style="width: 200px;">
        <button class="view-records-btn" onclick="viewRecords()">기록 조회</button>
    </div>
                
                <table class="records-table" id="recordsTable">
                    <thead>
                        <tr>
                            <th>참가자</th>
                            <th>실제 횟수</th>
                            <th>답변</th>
                            <th>결과</th>
                            <th>레벨</th>
                            <th>시간</th>
                        </tr>
                    </thead>
                    <tbody id="recordsBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Password Change Modal -->
    <div id="passwordModal" class="modal">
        <div class="modal-content">
            <h3>비밀번호 변경</h3>
            <p id="modalUserName"></p>
            <input type="password" class="modal-input" id="newPassword" placeholder="새 비밀번호">
            <div class="modal-buttons">
                <button class="modal-button confirm-btn" onclick="confirmPasswordChange()">변경</button>
                <button class="modal-button cancel-btn" onclick="closeModal()">취소</button>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <h3>사용자 삭제</h3>
            <p id="deleteUserName"></p>
            <p style="color: #dc3545; margin: 15px 0;"><strong>경고: 이 작업은 되돌릴 수 없습니다!</strong></p>
            <div class="modal-buttons">
                <button class="modal-button delete-btn" onclick="confirmDelete()">삭제</button>
                <button class="modal-button cancel-btn" onclick="closeModal()">취소</button>
            </div>
        </div>
    </div>

<script>
    let currentUserId = null;
    let dropdownTimeout;

    // Set today's date as default
    document.getElementById('recordDate').value = new Date().toISOString().split('T')[0];

    function toggleDropdown() {
        const dropdown = document.getElementById('dropdown');
        dropdown.classList.toggle('show');
    }

    document.querySelector('.user-menu').addEventListener('mouseenter', function() {
        clearTimeout(dropdownTimeout);
        document.getElementById('dropdown').classList.add('show');
    });

    document.querySelector('.user-menu').addEventListener('mouseleave', function() {
        dropdownTimeout = setTimeout(function() {
            document.getElementById('dropdown').classList.remove('show');
        }, 300);
    });

    async function toggleSetting(key) {
        try {
            const response = await fetch('/admin/toggle-setting', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ key })
            });
            
            const result = await response.json();
            if (!result.success) {
                alert('설정 변경에 실패했습니다.');
                location.reload();
            }
        } catch (error) {
            alert('서버와의 통신에 실패했습니다.');
            location.reload();
        }
    }

    async function searchUsers(searchTerm) {
        if (searchTerm.length === 0) {
            location.reload();
            return;
        }

        try {
            const response = await fetch('/admin/search', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ searchTerm })
            });
            
            const result = await response.json();
            updateUsersTable(result.users);
        } catch (error) {
            console.error('Search error:', error);
        }
    }

    function updateUsersTable(users) {
        const tbody = document.querySelector('#usersTable tbody');
        tbody.innerHTML = '';
        
        users.forEach(user => {
            const row = document.createElement('tr');
            row.setAttribute('data-user-id', user.id);
            row.setAttribute('data-username', user.username);
row.innerHTML = `
    <td>${user.username}</td>
    <td>
        <select class="level-select" onchange="updateLevel(${user.id}, this.value)">
            <option value="1" ${user.level === 1 ? 'selected' : ''}>레벨 1 (초급)</option>
            <option value="2" ${user.level === 2 ? 'selected' : ''}>레벨 2 (중급)</option>
            <option value="3" ${user.level === 3 ? 'selected' : ''}>레벨 3 (기본)</option>
        </select>
    </td>
    <td>
        <button class="action-button bonus-btn" onclick="giveBonus(${user.id})">추가 기회</button>
        <button class="action-button change-pwd-btn" onclick="changePassword(${user.id}, '${user.username}')">비밀번호</button>
        <button class="action-button all-records-btn" onclick="viewAllUserRecords(${user.id}, '${user.username}')">전체 기록</button>
        <button class="action-button delete-btn" onclick="deleteUser(${user.id}, '${user.username}')">삭제</button>
    </td>
`;
            tbody.appendChild(row);
        });
    }

    async function updateLevel(userId, level) {
        try {
            const response = await fetch('/admin/update-level', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userId, level: parseInt(level) })
            });
            
            const result = await response.json();
            if (result.success) {
                alert('레벨이 성공적으로 업데이트되었습니다.');
            } else {
                alert(result.message || '레벨 업데이트에 실패했습니다.');
            }
        } catch (error) {
            alert('서버와의 통신에 실패했습니다.');
        }
    }

    async function giveBonus(userId) {
        if (!confirm('이 참가자에게 추가 도전 기회를 주시겠습니까?')) {
            return;
        }

        try {
            const response = await fetch('/admin/bonus-attempt', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userId })
            });
            
            const result = await response.json();
            if (result.success) {
                alert('추가 도전 기회가 부여되었습니다.');
            } else {
                alert('추가 기회 부여에 실패했습니다.');
            }
        } catch (error) {
            alert('서버와의 통신에 실패했습니다.');
        }
    }

    function changePassword(userId, username) {
        currentUserId = userId;
        document.getElementById('modalUserName').textContent = `${username}의 비밀번호를 변경합니다.`;
        document.getElementById('newPassword').value = '';
        document.getElementById('passwordModal').style.display = 'block';
    }

    async function confirmPasswordChange() {
        const newPassword = document.getElementById('newPassword').value;
        if (!newPassword) {
            alert('새 비밀번호를 입력해주세요.');
            return;
        }

        try {
            const response = await fetch('/admin/force-change-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ 
                    userId: currentUserId, 
                    newPassword 
                })
            });
            
            const result = await response.json();
            if (result.success) {
                alert('비밀번호가 성공적으로 변경되었습니다.');
                closeModal();
            } else {
                alert(result.message || '비밀번호 변경에 실패했습니다.');
            }
        } catch (error) {
            alert('서버와의 통신에 실패했습니다.');
        }
    }

    function deleteUser(userId, username) {
        currentUserId = userId;
        document.getElementById('deleteUserName').textContent = `정말로 "${username}" 사용자를 삭제하시겠습니까?`;
        document.getElementById('deleteModal').style.display = 'block';
    }

    async function confirmDelete() {
        try {
            const response = await fetch('/admin/delete-user', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ userId: currentUserId })
            });
            
            const result = await response.json();
            if (result.success) {
                alert('사용자가 성공적으로 삭제되었습니다.');
                closeModal();
                location.reload();
            } else {
                alert(result.message || '사용자 삭제에 실패했습니다.');
            }
        } catch (error) {
            alert('서버와의 통신에 실패했습니다.');
        }
    }

    function closeModal() {
        document.getElementById('passwordModal').style.display = 'none';
        document.getElementById('deleteModal').style.display = 'none';
        currentUserId = null;
    }

    async function viewRecords() {
        const date = document.getElementById('recordDate').value;
        const userSearch = document.getElementById('userSearch').value;
        
        if (!date) {
            alert('날짜를 선택해주세요.');
            return;
        }

        try {
            let url = `/admin/records/${date}`;
            if (userSearch) {
                url += `?user=${encodeURIComponent(userSearch)}`;
            }
            
            const response = await fetch(url);
            const result = await response.json();
                    
            const recordsBody = document.getElementById('recordsBody');
            const recordsTable = document.getElementById('recordsTable');
            
            recordsBody.innerHTML = '';
            
            if (result.records && result.records.length > 0) {
                result.records.forEach(record => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${record.username}</td>
                        <td>${record.actual_count}</td>
                        <td>${record.user_answer}</td>
                        <td class="${record.is_correct ? 'correct-record' : 'incorrect-record'}">
                            ${record.is_correct ? '정답' : '오답'}
                        </td>
                        <td>레벨 ${record.level}</td>
                        <td>${record.timestamp ? record.timestamp.substring(11, 19) : '-'}</td>
                    `;
                    recordsBody.appendChild(row);
                });
                recordsTable.style.display = 'table';
            } else {
                recordsBody.innerHTML = '<tr><td colspan="6" style="text-align: center; padding: 20px;">해당 날짜에 기록이 없습니다.</td></tr>';
                recordsTable.style.display = 'table';
            }
        } catch (error) {
            alert('기록 조회에 실패했습니다.');
            console.error('Error:', error);
        }
    }

    // 학생별 기록 보기
    async function viewUserRecords(userId, username) {
        console.log('기록 조회 시작:', userId, username);
        
        try {
            const statsResponse = await fetch(`/admin/user-stats/${userId}`);
            const statsData = await statsResponse.json();
            console.log('통계 데이터:', statsData);
            
            const recordsResponse = await fetch(`/admin/user-records/${userId}?page=1&limit=50`);
            const recordsData = await recordsResponse.json();
            console.log('기록 데이터:', recordsData);
            
            if (recordsData.success && recordsData.records) {
                showUserRecordsModal(username, statsData.stats, recordsData);
            } else {
                alert('해당 사용자의 기록이 없습니다.');
            }
        } catch (error) {
            console.error('학생 기록 조회 오류:', error);
            alert('기록을 불러오는데 실패했습니다.');
        }
    }

    function showUserRecordsModal(username, stats, recordsData) {
       const records = recordsData.records || [];
const totalRecords = recordsData.totalRecords || records.length;

console.log('모달에 전달된 기록:', records);
console.log('기록 개수:', records.length);
        
        const modalHtml = `
            <div class="user-records-modal" id="userRecordsModal">
                <div class="user-records-content">
                    <h2>${username}의 훈련 기록 (총 ${totalRecords}개)</h2>
                    
                    <div class="stats-grid">
                        <div class="stat-item">
                            <div class="stat-number">${stats.totalAttempts}</div>
                            <div class="stat-label">총 훈련 횟수</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number">${stats.accuracy}%</div>
                            <div class="stat-label">정답률</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number">${stats.correctAnswers}</div>
                            <div class="stat-label">정답 횟수</div>
                        </div>
                        <div class="stat-item">
                            <div class="stat-number">${stats.recentWeek}</div>
                            <div class="stat-label">최근 7일</div>
                        </div>
                    </div>
                    
                    <h3>훈련 기록</h3>
                    <div style="max-height: 400px; overflow-y: auto;">
                        <table class="records-table">
                            <thead>
                                <tr>
                                    <th>날짜</th>
                                    <th>실제 횟수</th>
                                    <th>답변</th>
                                    <th>결과</th>
                                    <th>레벨</th>
                                    <th>난이도</th>
                                    <th>시간</th>
                                </tr>
                            </thead>
                           <tbody>
    ${records.length > 0 ? records.map(record => `
        <tr>
            <td>${record.date || '-'}</td>
            <td>${record.actual_count || '-'}</td>
            <td>${record.user_answer || '-'}</td>
            <td class="${record.is_correct ? 'correct-record' : 'incorrect-record'}">
                ${record.is_correct ? '정답' : '오답'}
            </td>
            <td>레벨 ${record.level || '-'}</td>
            <td>${record.difficulty_range || '-'}</td>
            <td>${record.timestamp ? record.timestamp.substring(11, 19) : '-'}</td>
        </tr>
    `).join('') : '<tr><td colspan="7" style="text-align: center; padding: 20px;">기록이 없습니다.</td></tr>'}
</tbody>
                        </table>
                    </div>
                    
                    <div style="text-align: center; margin-top: 20px;">
                        <button class="modal-button cancel-btn" onclick="closeUserRecordsModal()">닫기</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        document.getElementById('userRecordsModal').style.display = 'block';
    }

   function closeUserRecordsModal() {
    const modal = document.getElementById('userRecordsModal');
    if (modal) {
        modal.remove();
    }
}

// 여기에 새로운 함수들 추가 ↓

// 참가자별 전체 기록 보기
async function viewAllUserRecords(userId, username) {
    try {
        console.log('전체 기록 조회 시작:', userId, username);
        
        const statsResponse = await fetch(`/admin/user-stats/${userId}`);
        const statsData = await statsResponse.json();
        
        console.log('통계 데이터:', statsData);
        
        if (!statsData.success || !statsData.stats) {
            alert('통계 데이터를 불러올 수 없습니다.');
            return;
        }
        
        const allRecordsResponse = await fetch(`/admin/user-all-records/${userId}`);
        const allRecordsData = await allRecordsResponse.json();
        
        console.log('전체 기록 데이터:', allRecordsData);
        
        if (!allRecordsData.success) {
            alert('기록 데이터를 불러올 수 없습니다.');
            return;
        }
        
        showAllUserRecordsModal(username, statsData.stats, allRecordsData.dailyRecords);
    } catch (error) {
        console.error('전체 기록 조회 오류:', error);
        alert('전체 기록을 불러오는데 실패했습니다.');
    }
}

function showAllUserRecordsModal(username, stats, dailyRecords) {
    // stats가 null이면 기본값 사용
    const safeStats = stats || {
        totalAttempts: 0,
        accuracy: 0,
        correctAnswers: 0
    };
    
    const safeDailyRecords = dailyRecords || [];
    
    const modalHtml = `
        <div class="user-records-modal" id="allUserRecordsModal">
            <div class="user-records-content" style="max-width: 1200px;">
                <h2>${username}의 전체 훈련 기록</h2>
                
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-number">${safeStats.totalAttempts}</div>
                        <div class="stat-label">총 훈련 횟수</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${safeStats.accuracy}%</div>
                        <div class="stat-label">정답률</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${safeStats.correctAnswers}</div>
                        <div class="stat-label">정답 횟수</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">${safeDailyRecords.length}</div>
                        <div class="stat-label">훈련 일수</div>
                    </div>
                </div>
                
               <h3>날짜별 훈련 기록</h3>
                <div style="max-height: 500px; overflow-y: auto;">
                    ${safeDailyRecords.length > 0 ? safeDailyRecords.map((daily, index) => `
                        <div class="daily-record-item">
                            <div class="daily-record-header" onclick="toggleDailyRecord(${index})">
                                <div>
                                    <strong>${daily.date}</strong> 
                                    <span style="margin-left: 15px; color: #666;">
                                        ${daily.daily_attempts}회 시도 | 
                                        ${daily.correct_count}/${daily.daily_attempts} 정답 |
                                        레벨 ${daily.level} (${daily.difficulty_range || '-'})
                                    </span>
                                </div>
                                <span class="expand-icon" id="icon-${index}">▼</span>
                            </div>
                            <div class="daily-record-content" id="content-${index}">
                                <div class="daily-stats">
                                    <div class="daily-stat-item">
                                        <strong>${daily.daily_attempts}</strong><br>
                                        <small>총 시도</small>
                                    </div>
                                    <div class="daily-stat-item">
                                        <strong>${daily.correct_count}</strong><br>
                                        <small>정답 수</small>
                                    </div>
                                    <div class="daily-stat-item">
                                        <strong>${Math.round((daily.correct_count / daily.daily_attempts) * 100)}%</strong><br>
                                        <small>정답률</small>
                                    </div>
                                    <div class="daily-stat-item">
                                        <strong>${daily.avg_actual_count}</strong><br>
                                        <small>평균 횟수</small>
                                    </div>
                                </div>
                                
                                <table class="records-table">
                                    <thead>
                                        <tr>
                                            <th>시간</th>
                                            <th>실제 횟수</th>
                                            <th>답변</th>
                                            <th>결과</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${daily.records.map(record => `
                                            <tr>
                                                <td>${record.timestamp.substring(11, 19)}</td>
                                                <td>${record.actual_count}</td>
                                                <td>${record.user_answer}</td>
                                                <td class="${record.is_correct ? 'correct-record' : 'incorrect-record'}">
                                                    ${record.is_correct ? '정답' : '오답'}
                                                </td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    `).join('') : '<p style="text-align: center; padding: 40px;">기록이 없습니다.</p>'}
                </div>
                
                <div style="text-align: center; margin-top: 20px;">
                    <button class="modal-button cancel-btn" onclick="closeAllUserRecordsModal()">닫기</button>
                </div>
            </div>
        </div>
    `;
    
 document.body.insertAdjacentHTML('beforeend', modalHtml);
    document.getElementById('allUserRecordsModal').style.display = 'block';
}

function toggleDailyRecord(index) {
    const content = document.getElementById(`content-${index}`);
    const icon = document.getElementById(`icon-${index}`);
    
    if (content.classList.contains('show')) {
        content.classList.remove('show');
        icon.classList.remove('rotated');
    } else {
        content.classList.add('show');
        icon.classList.add('rotated');
    }
}

function closeAllUserRecordsModal() {
    const modal = document.getElementById('allUserRecordsModal');
    if (modal) {
        modal.remove();
    }
}

    // Close modals when clicking outside
window.onclick = function(event) {
    const passwordModal = document.getElementById('passwordModal');
    const deleteModal = document.getElementById('deleteModal');
    const userRecordsModal = document.getElementById('userRecordsModal');
    const allUserRecordsModal = document.getElementById('allUserRecordsModal');
    
    if (event.target === passwordModal) {
        passwordModal.style.display = 'none';
    }
    if (event.target === deleteModal) {
        deleteModal.style.display = 'none';
    }
    if (event.target === userRecordsModal) {
        closeUserRecordsModal();
    }
    if (event.target === allUserRecordsModal) {
        closeAllUserRecordsModal();
    }
}

    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        const userMenu = document.querySelector('.user-menu');
        if (!userMenu.contains(event.target)) {
            document.getElementById('dropdown').classList.remove('show');
        }
    });
</script>
</body>
</html>
